/*
 * generated by Xtext 2.13.0
 */
package dk.sdu.mmmi.mdsd.project.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dk.sdu.mmmi.mdsd.project.dSL.Area

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DSLGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))

		generateMap(fsa, resource);
	}
	
	def void generateMap(IFileSystemAccess2 fsa, Resource resource) {
		fsa.generateFile('FXMLDocument.fxml', generateFxmlText(resource));
	}
	
	def generateFxmlText(Resource resource) {
		//Static 10*10 map 
		// «»
		var areaSize = resource.allContents.filter(Area).next.size;
		'''
		<?xml version="1.0" encoding="UTF-8"?>
		
		<?import java.lang.*?>
		<?import javafx.scene.control.*?>
		<?import javafx.scene.layout.*?>
		
		<AnchorPane id="AnchorPane" prefHeight="600.0" prefWidth="600.0" xmlns:fx="http://javafx.com/fxml/1" xmlns="http://javafx.com/javafx/8" fx:controller="robotdefinitionsample.FXMLDocumentController">
		   <children>
		      <GridPane gridLinesVisible="true" layoutX="14.0" layoutY="14.0" maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" minHeight="-Infinity" minWidth="-Infinity" prefHeight="160.0" prefWidth="268.0" AnchorPane.bottomAnchor="14.0" AnchorPane.leftAnchor="14.0" AnchorPane.rightAnchor="14.0" AnchorPane.topAnchor="14.0">
		        <columnConstraints>
		        	«generateCol(areaSize.x)»
		        </columnConstraints>
		        <rowConstraints>
		        	«generateRow(areaSize.y)»
		        </rowConstraints>
		      </GridPane>
		   </children>
		</AnchorPane>
		'''
	}
	
	def generateCol(int x) {
		var result = "";
		for (var i = 0; i < x; i++) {
			result += "\n <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />"
		}
		result;
	}
	
	def generateRow(int y) {
				var result = "";
		for (var i = 0; i < y; i++) {
			result += "<RowConstraints minHeight=\"10.0\" prefHeight=\"30.0\" vgrow=\"SOMETIMES\" />"
		}
		result;
	}
}
