/*
 * generated by Xtext 2.13.0
 */
package dk.sdu.mmmi.mdsd.project.validation

import dk.sdu.mmmi.mdsd.project.dSL.Shelf
import org.eclipse.xtext.EcoreUtil2
import dk.sdu.mmmi.mdsd.project.dSL.DSLPackage
import org.eclipse.xtext.validation.Check
import dk.sdu.mmmi.mdsd.project.dSL.Terminatable
import dk.sdu.mmmi.mdsd.project.dSL.TaskTerminated

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class DSLValidator extends AbstractDSLValidator {
	

	public static val INVALID_NAME = 'Another shelf with the same name already exists';
	public static val INVALID_TERMINATABLE = "Two terminatables handlers can't have the same name";
	
	@Check(FAST)
	def checkNames(Shelf s) {
		val container = EcoreUtil2.getRootContainer(s);
		val cand = EcoreUtil2.getAllContentsOfType(container, Shelf);
		
		for (Shelf myS : cand) {
			
			if (s != myS) {
				if (s.name.equals(myS.name)) {
					error(INVALID_NAME,  DSLPackage.Literals.AREA_ITEM__NAME);
				}
			}

		}
	}
	
	@Check(FAST)
	def checkTerminatable(TaskTerminated t) {
		val container = EcoreUtil2.getRootContainer(t)
		val cand = EcoreUtil2.getAllContentsOfType(container, TaskTerminated)
		
		for (TaskTerminated myT : cand) {
			if (t != myT) {
				if (t.terminatable.name.equals(myT.terminatable.name)) {
					error(INVALID_TERMINATABLE, DSLPackage.Literals.TASK_TERMINATED__TERMINATABLE);
				}
			}
		}
	}
	
}
