/*
 * generated by Xtext 2.13.0
 */
package dk.sdu.mmmi.mdsd.project.validation

import dk.sdu.mmmi.mdsd.project.dSL.Shelf
import dk.sdu.mmmi.mdsd.project.dSL.Property
import org.eclipse.xtext.EcoreUtil2
import dk.sdu.mmmi.mdsd.project.dSL.DSLPackage
import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class DSLValidator extends AbstractDSLValidator {
	

	public static val INVALID_NAME = 'Invalid name 2 objects with same name';
	
	@Check(FAST)
	def checkNames(Shelf s) {
		val container = EcoreUtil2.getRootContainer(s);
		val cand = EcoreUtil2.getAllContentsOfType(container, Shelf);
		
		for (Shelf myS : cand) {
			
			if (s != myS) {
				if (s.name.equals(myS.name)) {
					warning(INVALID_NAME,  DSLPackage.Literals.AREA_ITEM__NAME);
				}
			}

		}
	}
	
	public static val INVALID_PROPERTY_NAME = 'Invalid property name 2 properties with same name';
	
	@Check(FAST)
	def checkProperty(Property p) {
		val container = EcoreUtil2.getRootContainer(p);
		val cand = EcoreUtil2.getAllContentsOfType(container, Property);
		
		for (Property myP : cand) {
			if (p != myP) {
				if (p.name.equals(myP.name)) {
					warning(INVALID_PROPERTY_NAME,  DSLPackage.Literals.PROPERTY__NAME);
				}
			}
		}
	}
	
}
